var documenterSearchIndex = {"docs":
[{"location":"compare/#Comparison-with-[AdvancedHMC.jl](https://github.com/TuringLang/AdvancedHMC.jl)","page":"Comparison","title":"Comparison with AdvancedHMC.jl","text":"","category":"section"},{"location":"compare/#Comparison-1","page":"Comparison","title":"Comparison 1","text":"","category":"section"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"This example compares the mean of samples generated using Gibbs and AdvancedMH sampling methods. There is two parameters in this examples with proposal distribution of P1 ~ Normal(2.0,3.0) and P2 ~  Normal(3.0,3.0). Moreover, there is no likelihood function involved in the calculation of log joint probability.","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"#use packages\nusing AdvancedMH\nusing MCMCChains\nusing GibbsSampler\nusing Distributions\nusing StatsPlots\n\n#define prior and proposal distributions\npriors = [Normal(2.0,3.0), Normal(3.0,3.0)]\n\n#log of joint probability\nfunction logJoint(params)\t\n\tlogPrior= sum(logpdf.(priors, params))\n\treturn logPrior\nend\n\n# Construct a DensityModel for advanced MH.\nmdl = DensityModel(logJoint)\n\n# Set up our sampler with a joint multivariate Normal proposal for advanced MH.\nspl = RWMH(MvNormal([2.0,3.0],3.0))\n\n# Sample from the posterior using Advanced MH.\nchm = sample(mdl, spl, 100000; param_names=[\"μ\", \"σ\"], chain_type=Chains)\n\n#define MCMC sampling algorithm\nalg = [MH()]\nsample_alg =Dict(\n\t1 => [1, Normal(2.0,3.0)],\n\t2 => [1, Normal(3.0,3.0)]\n)\n\n# Sample from the posterior using Gibbs sampler.\nchn = GibbsSampler.gibbs(alg, sample_alg, logJoint;itr = 100000, chain_type = :mcmcchain)\n","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"The results are as below:","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"plot(chm)","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"(Image: Samples generated using AdvancedMH.jl)","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"plot(chn)","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"(Image: Samples generated using GibbsSampler.jl)","category":"page"},{"location":"compare/#Comparison-2","page":"Comparison","title":"Comparison 2","text":"","category":"section"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"The only difference from the Example1 is the introduction likelihood function to calculate the joint probability.","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"#Define  the prior and proposal distribution\npriors = [Normal(1.0,5.0), Normal(0.0,5.0)]\n\n#Define the model\nmodel(z) = z[1] + z[2]\noutput = 5.0\n\n#Function to calculate log joint probability\nfunction logJoint1(params)\t\n\tlogPrior= sum(logpdf.(priors, params))\n\tlogLikelihood = logpdf(Normal(model(params)), output)\n\treturn logPrior + logLikelihood\nend\n\n# Construct a DensityModel for advanced MH.\nmdl1 = DensityModel(logJoint1)\n\n# Set up our sampler with a joint multivariate Normal proposal for advanced MH.\nspl1 = RWMH(MvNormal([1.0,0.0],5.0))\n\n# Sample from the posterior using advanced MH.\nchm = sample(mdl1, spl1, 100000; param_names=[\"μ\", \"σ\"], chain_type=Chains)\n\n\n#define MCMC sampling algorithm\nalg = [MH()]\nsample_alg =Dict(\n\t1 => [1, Normal(1.0,5.0)],\n\t2 => [1, Normal(0.0,5.0)]\n)\n\n# Sample from the posterior using Gibbs sampler.\nchn = GibbsSampler.gibbs(alg, sample_alg, logJoint;itr = 100000, chain_type = :mcmcchain)\n\n@show mean(chn[\"param[1][1]\"]) mean(chm[:μ])","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"The results are as below:","category":"page"},{"location":"compare/","page":"Comparison","title":"Comparison","text":"mean(chn[\"param[1][1]\"]) = 3.018838279341398\nmean(chm[:μ]) = 3.9580733435017885\n","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section contains different examples that describes the usage of GibbsSampler.jl package.","category":"page"},{"location":"examples/#Different-MCMC-Samplers-for-parameter-sampling","page":"Examples","title":"Different MCMC Samplers for parameter sampling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The GibbsSampler.jl allows the use of MH, HMC, NUTS MCMC samplers with the help of AdvancedMH.jl and AdvancedHMC.jl package. The GibbsSampler.gibbs(...) function has an input corresponds to alg, which decides the MCMC sampler availble based on structs defined by the package (Eg: MH(), adHMC(), adNUTS() etc.). This algorithm need to to be mapped to parameter groups using another dictionary input sample_alg. The key of sample_alg represents the parameter group and the value vector contains the index of the sampling algorithm defined in alg with proposal distribution.","category":"page"},{"location":"examples/#Use-of-AdvancedMH-as-MCMC-sampler","page":"Examples","title":"Use of AdvancedMH as MCMC sampler","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The MH() struct defined with GibbsSampler.jl package is used to select MCMC sampler for each parameter in Gibbs sampling. ","category":"page"},{"location":"examples/#Example","page":"Examples","title":"Example","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GibbsSampler\nusing Distributions\n\n#define prior and proposal distributions\npriors = [Normal(2.0,3.0), Normal(3.0,3.0)]\n\n#log of joint probability\nfunction logJoint(params)\t\n\tlogPrior= sum(logpdf.(priors, params))\n\treturn logPrior\nend\nalg = [MH()]\nsample_alg =Dict(\n\t1 => [1, Normal(2.0,3.0)],\n\t2 => [1, Normal(3.0,3.0)]\n)\n# Sample from the posterior using Gibbs sampler.\nchn = GibbsSampler.gibbs(alg, sample_alg, logJoint;itr = 10000, chain_type = :mcmcchain)","category":"page"},{"location":"examples/#Use-of-AdvancedHMC-as-MCMC-sampler","page":"Examples","title":"Use of AdvancedHMC as MCMC sampler","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The adHMC() struct defined with GibbsSampler.jl package is used to select MCMC sampler for each parameter in Gibbs sampling. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"#select MCMC sampler as vector with adHMC() struct with same length of proposal distribution\nalg = [adHMC()]\nsample_alg =Dict(\n\t1 => [1],\n\t2 => [1]\n)\n\n# Sample from the posterior using Gibbs sampler.\nchn = GibbsSampler.gibbs(alg, sample_alg, logJoint;itr = 10000, chain_type = :mcmcchain)","category":"page"},{"location":"examples/#Use-of-AdvancedHMC-as-MCMC-sampler-2","page":"Examples","title":"Use of AdvancedHMC as MCMC sampler","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The adNUTS() struct defined with GibbsSampler.jl package is used to select MCMC sampler for each parameter in Gibbs sampling. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"#select MCMC sampler as vector with adNUTS() struct with same length of proposal distribution\nalg = [adNUTS()]\nsample_alg =Dict(\n\t1 => [1],\n\t2 => [1]\n)\n\n# Sample from the posterior using Gibbs sampler.\nchn = GibbsSampler.gibbs(alg, sample_alg, logJoint;itr = 10000, chain_type = :mcmcchain)","category":"page"},{"location":"examples/#Use-of-different-MCMC-sampler-for-each-parameter","page":"Examples","title":"Use of different MCMC sampler for each parameter","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"#select MCMC sampler as vector the same length of proposal distribution\nalg = [adNUTS(), MH()]\nsample_alg =Dict(\n\t1 => [1],\n\t2 => [2, Normal(0.0,1.0)]\n)\n\n# Sample from the posterior using Gibbs sampler.\nchn = GibbsSampler.gibbs(alg, sample_alg, logJoint;itr = 10000, chain_type = :mcmcchain)","category":"page"},{"location":"structs/#GibbsSampler.jl","page":"Sampling Algorithm","title":"GibbsSampler.jl","text":"","category":"section"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"CurrentModule = GibbsSampler\nDocTestSetup = quote\n    using GibbsSampler\nend","category":"page"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"There are different MCMC sampling algorithm is available with GibbsSampler.jl package.","category":"page"},{"location":"structs/#MH-Sampler","page":"Sampling Algorithm","title":"MH Sampler","text":"","category":"section"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"The MH sampler can be configured as struct like below:","category":"page"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"MH","category":"page"},{"location":"structs/#GibbsSampler.MH","page":"Sampling Algorithm","title":"GibbsSampler.MH","text":"MH\n\nMH is a struct to choose MH MCMC sampling algorithm\n\nFields\n\nn_samples\t: Number of iterations. Default value is 10\n\nExample\n\na = MH(n_samples = 4)\n\n\n\n\n\n","category":"type"},{"location":"structs/#adHMC-Sampler","page":"Sampling Algorithm","title":"adHMC Sampler","text":"","category":"section"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"The HMC sampler can be configured as struct like below:","category":"page"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"adHMC","category":"page"},{"location":"structs/#GibbsSampler.adHMC","page":"Sampling Algorithm","title":"GibbsSampler.adHMC","text":"adHMC\n\nadHMC is a struct to choose HMC MCMC sampling algorithm\n\nFields\n\nn_samples\t: Number of iterations\nn_adapts\t: Adaptation\nbackend \t: Automatic differentiation backend\n\nExample\n\na = adHMC( nsamples = 10, nadapts = 5, backend = ForwardDiff )\n\n\n\n\n\n","category":"type"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"The backend variable is used to select the automatic differentiation backend. ForwardDiff and ReversedDiff are the values to select forward and reverse differentiation, respectively.","category":"page"},{"location":"structs/#adNUTS-Sampler","page":"Sampling Algorithm","title":"adNUTS Sampler","text":"","category":"section"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"The NUTS sampler can be configured as struct like below:","category":"page"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"adNUTS","category":"page"},{"location":"structs/#GibbsSampler.adNUTS","page":"Sampling Algorithm","title":"GibbsSampler.adNUTS","text":"adNUTS\n\nadNUTS is a struct to choose NUTS MCMC sampling algorithm\n\nFields\n\nn_samples\t: Number of iterations\nn_adapts\t: Adaptation\nbackend \t: Automatic differentiation backend\n\nExample\n\na = adNUTS( nsamples = 10, nadapts = 5, backend = ForwardDiff )\n\n\n\n\n\n","category":"type"},{"location":"structs/","page":"Sampling Algorithm","title":"Sampling Algorithm","text":"The backend variable is used to select the automatic differentiation backend. ForwardDiff and ReversedDiff are the values to select forward and reverse differentiation, respectively.","category":"page"},{"location":"#GibbsSampler.jl","page":"Home","title":"GibbsSampler.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GibbsSampler\nDocTestSetup = quote\n    using GibbsSampler\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package helps to generate posterior samples using Gibbs sampling algorithm from a specified multivariate probability distribution when direct sampling is difficult. This Julia package supports MH and HMC based algorithms with different automatic differentiation backends.","category":"page"},{"location":"#Gibbs-Sampling","page":"Home","title":"Gibbs Sampling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"gibbs(proposal::Vector{T}, logJoint::Function; \n\t\tsample_alg = [MH() for _ in 1:length(proposal)], \n\t\titr = 100, burn_in = Int(round(itr*0.2))\n\t) where {T <: Distribution}","category":"page"}]
}
